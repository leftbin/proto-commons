// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leftbin/commons/proto/v1/english/rpc/enums/enums.proto

package com.leftbin.commons.proto.v1.english.rpc.enums;

/**
 * <pre>
 * english word enums added to avoid typing mistakes for the commonly used words for naming things
 * this enum is encapsulated inside a message as a few entries like "name" (a reserved word in few languages) can only be added to the enum if it is inside a message.
 * the recommended best practice to prefix the entry with enum name has been intentionally ignored to as the values of the entries are intended to be used to name resources.
 * </pre>
 *
 * Protobuf type {@code leftbin.commons.proto.v1.english.rpc.enums.Word}
 */
public final class Word extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:leftbin.commons.proto.v1.english.rpc.enums.Word)
    WordOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Word.newBuilder() to construct.
  private Word(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Word() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Word();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.leftbin.commons.proto.v1.english.rpc.enums.EnumsProto.internal_static_leftbin_commons_proto_v1_english_rpc_enums_Word_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.leftbin.commons.proto.v1.english.rpc.enums.EnumsProto.internal_static_leftbin_commons_proto_v1_english_rpc_enums_Word_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.leftbin.commons.proto.v1.english.rpc.enums.Word.class, com.leftbin.commons.proto.v1.english.rpc.enums.Word.Builder.class);
  }

  /**
   * Protobuf enum {@code leftbin.commons.proto.v1.english.rpc.enums.Word.WordEnum}
   */
  public enum WordEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>word_unspecified = 0;</code>
     */
    word_unspecified(0),
    /**
     * <code>app = 1;</code>
     */
    app(1),
    /**
     * <code>application = 2;</code>
     */
    application(2),
    /**
     * <code>aws = 3;</code>
     */
    aws(3),
    /**
     * <code>azure = 4;</code>
     */
    azure(4),
    /**
     * <code>bill = 5;</code>
     */
    bill(5),
    /**
     * <code>company = 6;</code>
     */
    company(6),
    /**
     * <code>config = 7;</code>
     */
    config(7),
    /**
     * <code>cpu = 8;</code>
     */
    cpu(8),
    /**
     * <code>debug = 9;</code>
     */
    debug(9),
    /**
     * <code>docker = 10;</code>
     */
    docker(10),
    /**
     * <code>domain = 11;</code>
     */
    domain(11),
    /**
     * <code>email = 12;</code>
     */
    email(12),
    /**
     * <code>endpoint = 13;</code>
     */
    endpoint(13),
    /**
     * <code>external = 14;</code>
     */
    external(14),
    /**
     * <code>file = 15;</code>
     */
    file(15),
    /**
     * <code>gcp = 16;</code>
     */
    gcp(16),
    /**
     * <code>google = 17;</code>
     */
    google(17),
    /**
     * <code>hosting = 18;</code>
     */
    hosting(18),
    /**
     * <code>hostname = 19;</code>
     */
    hostname(19),
    /**
     * <code>id = 20;</code>
     */
    id(20),
    /**
     * <code>ingress = 21;</code>
     */
    ingress(21),
    /**
     * <code>instances = 22;</code>
     */
    instances(22),
    /**
     * <code>internal = 23;</code>
     */
    internal(23),
    /**
     * <code>ip = 24;</code>
     */
    ip(24),
    /**
     * <code>key = 25;</code>
     */
    key(25),
    /**
     * <code>kubeconfig = 26;</code>
     */
    kubeconfig(26),
    /**
     * <code>kubernetes = 27;</code>
     */
    kubernetes(27),
    /**
     * <code>localhost = 28;</code>
     */
    localhost(28),
    /**
     * <code>machine = 29;</code>
     */
    machine(29),
    /**
     * <code>main = 30;</code>
     */
    main(30),
    /**
     * <code>maven = 31;</code>
     */
    maven(31),
    /**
     * <code>memory = 32;</code>
     */
    memory(32),
    /**
     * <code>microservice = 33;</code>
     */
    microservice(33),
    /**
     * <code>name = 34;</code>
     */
    name(34),
    /**
     * <code>nameservers = 35;</code>
     */
    nameservers(35),
    /**
     * <code>namespace = 36;</code>
     */
    namespace(36),
    /**
     * <code>network = 37;</code>
     */
    network(37),
    /**
     * <code>npm = 38;</code>
     */
    npm(38),
    /**
     * <code>number = 39;</code>
     */
    number(39),
    /**
     * <code>org = 40;</code>
     */
    org(40),
    /**
     * <code>parent = 41;</code>
     */
    parent(41),
    /**
     * <code>postgres = 42;</code>
     */
    postgres(42),
    /**
     * <code>product = 43;</code>
     */
    product(43),
    /**
     * <code>project = 44;</code>
     */
    project(44),
    /**
     * <code>python = 45;</code>
     */
    python(45),
    /**
     * <code>repo = 46;</code>
     */
    repo(46),
    /**
     * <code>review = 47;</code>
     */
    review(47),
    /**
     * <code>server = 48;</code>
     */
    server(48),
    /**
     * <code>servers = 49;</code>
     */
    servers(49),
    /**
     * <code>share = 50;</code>
     */
    share(50),
    /**
     * <code>shared_services = 51;</code>
     */
    shared_services(51),
    /**
     * <code>spilo = 52;</code>
     */
    spilo(52),
    /**
     * <code>spot = 53;</code>
     */
    spot(53),
    /**
     * <code>stunnel = 54;</code>
     */
    stunnel(54),
    /**
     * <code>team = 55;</code>
     */
    team(55),
    /**
     * <code>type = 56;</code>
     */
    type(56),
    /**
     * <code>username = 57;</code>
     */
    username(57),
    /**
     * <code>util = 58;</code>
     */
    util(58),
    /**
     * <code>version = 59;</code>
     */
    version(59),
    /**
     * <code>workload = 60;</code>
     */
    workload(60),
    /**
     * <code>url = 61;</code>
     */
    url(61),
    /**
     * <code>env = 62;</code>
     */
    env(62),
    /**
     * <code>kafka = 63;</code>
     */
    kafka(63),
    /**
     * <code>unknown = 64;</code>
     */
    unknown(64),
    /**
     * <code>resource = 65;</code>
     */
    resource(65),
    /**
     * <code>resource_id = 66;</code>
     */
    resource_id(66),
    /**
     * <code>resource_type = 67;</code>
     */
    resource_type(67),
    /**
     * <code>product_env = 68;</code>
     */
    product_env(68),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>word_unspecified = 0;</code>
     */
    public static final int word_unspecified_VALUE = 0;
    /**
     * <code>app = 1;</code>
     */
    public static final int app_VALUE = 1;
    /**
     * <code>application = 2;</code>
     */
    public static final int application_VALUE = 2;
    /**
     * <code>aws = 3;</code>
     */
    public static final int aws_VALUE = 3;
    /**
     * <code>azure = 4;</code>
     */
    public static final int azure_VALUE = 4;
    /**
     * <code>bill = 5;</code>
     */
    public static final int bill_VALUE = 5;
    /**
     * <code>company = 6;</code>
     */
    public static final int company_VALUE = 6;
    /**
     * <code>config = 7;</code>
     */
    public static final int config_VALUE = 7;
    /**
     * <code>cpu = 8;</code>
     */
    public static final int cpu_VALUE = 8;
    /**
     * <code>debug = 9;</code>
     */
    public static final int debug_VALUE = 9;
    /**
     * <code>docker = 10;</code>
     */
    public static final int docker_VALUE = 10;
    /**
     * <code>domain = 11;</code>
     */
    public static final int domain_VALUE = 11;
    /**
     * <code>email = 12;</code>
     */
    public static final int email_VALUE = 12;
    /**
     * <code>endpoint = 13;</code>
     */
    public static final int endpoint_VALUE = 13;
    /**
     * <code>external = 14;</code>
     */
    public static final int external_VALUE = 14;
    /**
     * <code>file = 15;</code>
     */
    public static final int file_VALUE = 15;
    /**
     * <code>gcp = 16;</code>
     */
    public static final int gcp_VALUE = 16;
    /**
     * <code>google = 17;</code>
     */
    public static final int google_VALUE = 17;
    /**
     * <code>hosting = 18;</code>
     */
    public static final int hosting_VALUE = 18;
    /**
     * <code>hostname = 19;</code>
     */
    public static final int hostname_VALUE = 19;
    /**
     * <code>id = 20;</code>
     */
    public static final int id_VALUE = 20;
    /**
     * <code>ingress = 21;</code>
     */
    public static final int ingress_VALUE = 21;
    /**
     * <code>instances = 22;</code>
     */
    public static final int instances_VALUE = 22;
    /**
     * <code>internal = 23;</code>
     */
    public static final int internal_VALUE = 23;
    /**
     * <code>ip = 24;</code>
     */
    public static final int ip_VALUE = 24;
    /**
     * <code>key = 25;</code>
     */
    public static final int key_VALUE = 25;
    /**
     * <code>kubeconfig = 26;</code>
     */
    public static final int kubeconfig_VALUE = 26;
    /**
     * <code>kubernetes = 27;</code>
     */
    public static final int kubernetes_VALUE = 27;
    /**
     * <code>localhost = 28;</code>
     */
    public static final int localhost_VALUE = 28;
    /**
     * <code>machine = 29;</code>
     */
    public static final int machine_VALUE = 29;
    /**
     * <code>main = 30;</code>
     */
    public static final int main_VALUE = 30;
    /**
     * <code>maven = 31;</code>
     */
    public static final int maven_VALUE = 31;
    /**
     * <code>memory = 32;</code>
     */
    public static final int memory_VALUE = 32;
    /**
     * <code>microservice = 33;</code>
     */
    public static final int microservice_VALUE = 33;
    /**
     * <code>name = 34;</code>
     */
    public static final int name_VALUE = 34;
    /**
     * <code>nameservers = 35;</code>
     */
    public static final int nameservers_VALUE = 35;
    /**
     * <code>namespace = 36;</code>
     */
    public static final int namespace_VALUE = 36;
    /**
     * <code>network = 37;</code>
     */
    public static final int network_VALUE = 37;
    /**
     * <code>npm = 38;</code>
     */
    public static final int npm_VALUE = 38;
    /**
     * <code>number = 39;</code>
     */
    public static final int number_VALUE = 39;
    /**
     * <code>org = 40;</code>
     */
    public static final int org_VALUE = 40;
    /**
     * <code>parent = 41;</code>
     */
    public static final int parent_VALUE = 41;
    /**
     * <code>postgres = 42;</code>
     */
    public static final int postgres_VALUE = 42;
    /**
     * <code>product = 43;</code>
     */
    public static final int product_VALUE = 43;
    /**
     * <code>project = 44;</code>
     */
    public static final int project_VALUE = 44;
    /**
     * <code>python = 45;</code>
     */
    public static final int python_VALUE = 45;
    /**
     * <code>repo = 46;</code>
     */
    public static final int repo_VALUE = 46;
    /**
     * <code>review = 47;</code>
     */
    public static final int review_VALUE = 47;
    /**
     * <code>server = 48;</code>
     */
    public static final int server_VALUE = 48;
    /**
     * <code>servers = 49;</code>
     */
    public static final int servers_VALUE = 49;
    /**
     * <code>share = 50;</code>
     */
    public static final int share_VALUE = 50;
    /**
     * <code>shared_services = 51;</code>
     */
    public static final int shared_services_VALUE = 51;
    /**
     * <code>spilo = 52;</code>
     */
    public static final int spilo_VALUE = 52;
    /**
     * <code>spot = 53;</code>
     */
    public static final int spot_VALUE = 53;
    /**
     * <code>stunnel = 54;</code>
     */
    public static final int stunnel_VALUE = 54;
    /**
     * <code>team = 55;</code>
     */
    public static final int team_VALUE = 55;
    /**
     * <code>type = 56;</code>
     */
    public static final int type_VALUE = 56;
    /**
     * <code>username = 57;</code>
     */
    public static final int username_VALUE = 57;
    /**
     * <code>util = 58;</code>
     */
    public static final int util_VALUE = 58;
    /**
     * <code>version = 59;</code>
     */
    public static final int version_VALUE = 59;
    /**
     * <code>workload = 60;</code>
     */
    public static final int workload_VALUE = 60;
    /**
     * <code>url = 61;</code>
     */
    public static final int url_VALUE = 61;
    /**
     * <code>env = 62;</code>
     */
    public static final int env_VALUE = 62;
    /**
     * <code>kafka = 63;</code>
     */
    public static final int kafka_VALUE = 63;
    /**
     * <code>unknown = 64;</code>
     */
    public static final int unknown_VALUE = 64;
    /**
     * <code>resource = 65;</code>
     */
    public static final int resource_VALUE = 65;
    /**
     * <code>resource_id = 66;</code>
     */
    public static final int resource_id_VALUE = 66;
    /**
     * <code>resource_type = 67;</code>
     */
    public static final int resource_type_VALUE = 67;
    /**
     * <code>product_env = 68;</code>
     */
    public static final int product_env_VALUE = 68;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WordEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WordEnum forNumber(int value) {
      switch (value) {
        case 0: return word_unspecified;
        case 1: return app;
        case 2: return application;
        case 3: return aws;
        case 4: return azure;
        case 5: return bill;
        case 6: return company;
        case 7: return config;
        case 8: return cpu;
        case 9: return debug;
        case 10: return docker;
        case 11: return domain;
        case 12: return email;
        case 13: return endpoint;
        case 14: return external;
        case 15: return file;
        case 16: return gcp;
        case 17: return google;
        case 18: return hosting;
        case 19: return hostname;
        case 20: return id;
        case 21: return ingress;
        case 22: return instances;
        case 23: return internal;
        case 24: return ip;
        case 25: return key;
        case 26: return kubeconfig;
        case 27: return kubernetes;
        case 28: return localhost;
        case 29: return machine;
        case 30: return main;
        case 31: return maven;
        case 32: return memory;
        case 33: return microservice;
        case 34: return name;
        case 35: return nameservers;
        case 36: return namespace;
        case 37: return network;
        case 38: return npm;
        case 39: return number;
        case 40: return org;
        case 41: return parent;
        case 42: return postgres;
        case 43: return product;
        case 44: return project;
        case 45: return python;
        case 46: return repo;
        case 47: return review;
        case 48: return server;
        case 49: return servers;
        case 50: return share;
        case 51: return shared_services;
        case 52: return spilo;
        case 53: return spot;
        case 54: return stunnel;
        case 55: return team;
        case 56: return type;
        case 57: return username;
        case 58: return util;
        case 59: return version;
        case 60: return workload;
        case 61: return url;
        case 62: return env;
        case 63: return kafka;
        case 64: return unknown;
        case 65: return resource;
        case 66: return resource_id;
        case 67: return resource_type;
        case 68: return product_env;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WordEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WordEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WordEnum>() {
            public WordEnum findValueByNumber(int number) {
              return WordEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.leftbin.commons.proto.v1.english.rpc.enums.Word.getDescriptor().getEnumTypes().get(0);
    }

    private static final WordEnum[] VALUES = values();

    public static WordEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WordEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:leftbin.commons.proto.v1.english.rpc.enums.Word.WordEnum)
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.leftbin.commons.proto.v1.english.rpc.enums.Word)) {
      return super.equals(obj);
    }
    com.leftbin.commons.proto.v1.english.rpc.enums.Word other = (com.leftbin.commons.proto.v1.english.rpc.enums.Word) obj;

    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.leftbin.commons.proto.v1.english.rpc.enums.Word prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * english word enums added to avoid typing mistakes for the commonly used words for naming things
   * this enum is encapsulated inside a message as a few entries like "name" (a reserved word in few languages) can only be added to the enum if it is inside a message.
   * the recommended best practice to prefix the entry with enum name has been intentionally ignored to as the values of the entries are intended to be used to name resources.
   * </pre>
   *
   * Protobuf type {@code leftbin.commons.proto.v1.english.rpc.enums.Word}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:leftbin.commons.proto.v1.english.rpc.enums.Word)
      com.leftbin.commons.proto.v1.english.rpc.enums.WordOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.leftbin.commons.proto.v1.english.rpc.enums.EnumsProto.internal_static_leftbin_commons_proto_v1_english_rpc_enums_Word_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.leftbin.commons.proto.v1.english.rpc.enums.EnumsProto.internal_static_leftbin_commons_proto_v1_english_rpc_enums_Word_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.leftbin.commons.proto.v1.english.rpc.enums.Word.class, com.leftbin.commons.proto.v1.english.rpc.enums.Word.Builder.class);
    }

    // Construct using com.leftbin.commons.proto.v1.english.rpc.enums.Word.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.leftbin.commons.proto.v1.english.rpc.enums.EnumsProto.internal_static_leftbin_commons_proto_v1_english_rpc_enums_Word_descriptor;
    }

    @java.lang.Override
    public com.leftbin.commons.proto.v1.english.rpc.enums.Word getDefaultInstanceForType() {
      return com.leftbin.commons.proto.v1.english.rpc.enums.Word.getDefaultInstance();
    }

    @java.lang.Override
    public com.leftbin.commons.proto.v1.english.rpc.enums.Word build() {
      com.leftbin.commons.proto.v1.english.rpc.enums.Word result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.leftbin.commons.proto.v1.english.rpc.enums.Word buildPartial() {
      com.leftbin.commons.proto.v1.english.rpc.enums.Word result = new com.leftbin.commons.proto.v1.english.rpc.enums.Word(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.leftbin.commons.proto.v1.english.rpc.enums.Word) {
        return mergeFrom((com.leftbin.commons.proto.v1.english.rpc.enums.Word)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.leftbin.commons.proto.v1.english.rpc.enums.Word other) {
      if (other == com.leftbin.commons.proto.v1.english.rpc.enums.Word.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:leftbin.commons.proto.v1.english.rpc.enums.Word)
  }

  // @@protoc_insertion_point(class_scope:leftbin.commons.proto.v1.english.rpc.enums.Word)
  private static final com.leftbin.commons.proto.v1.english.rpc.enums.Word DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.leftbin.commons.proto.v1.english.rpc.enums.Word();
  }

  public static com.leftbin.commons.proto.v1.english.rpc.enums.Word getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Word>
      PARSER = new com.google.protobuf.AbstractParser<Word>() {
    @java.lang.Override
    public Word parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Word> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Word> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.leftbin.commons.proto.v1.english.rpc.enums.Word getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

