// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leftbin/commons/proto/v1/network/dns/record/rpc/enums/enums.proto

package com.leftbin.commons.proto.v1.network.dns.record.rpc.enums;

/**
 * <pre>
 * dns record type
 * the recommended best practice to prefix the entry with enum name has been intentionally ignored to ensure that the enum's value matches the dns record type.
 * </pre>
 *
 * Protobuf enum {@code leftbin.commons.proto.v1.network.dns.record.rpc.enums.DnsRecordType}
 */
public enum DnsRecordType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DNS_RECORD_TYPE_UNSPECIFIED = 0;</code>
   */
  DNS_RECORD_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   *host address
   * </pre>
   *
   * <code>A = 1;</code>
   */
  A(1),
  /**
   * <pre>
   *ipv6 host address
   * </pre>
   *
   * <code>AAAA = 2;</code>
   */
  AAAA(2),
  /**
   * <pre>
   *auto resolved alias
   * </pre>
   *
   * <code>ALIAS = 3;</code>
   */
  ALIAS(3),
  /**
   * <pre>
   *canonical name for an alias
   * </pre>
   *
   * <code>CNAME = 4;</code>
   */
  CNAME(4),
  /**
   * <pre>
   *mail exchange
   * </pre>
   *
   * <code>MX = 5;</code>
   */
  MX(5),
  /**
   * <pre>
   *name server
   * </pre>
   *
   * <code>NS = 6;</code>
   */
  NS(6),
  /**
   * <pre>
   *pointer
   * </pre>
   *
   * <code>PTR = 7;</code>
   */
  PTR(7),
  /**
   * <pre>
   *start of authority
   * </pre>
   *
   * <code>SOA = 8;</code>
   */
  SOA(8),
  /**
   * <pre>
   *location of service
   * </pre>
   *
   * <code>SRV = 9;</code>
   */
  SRV(9),
  /**
   * <pre>
   *descriptive text
   * </pre>
   *
   * <code>TXT = 10;</code>
   */
  TXT(10),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DNS_RECORD_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int DNS_RECORD_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   *host address
   * </pre>
   *
   * <code>A = 1;</code>
   */
  public static final int A_VALUE = 1;
  /**
   * <pre>
   *ipv6 host address
   * </pre>
   *
   * <code>AAAA = 2;</code>
   */
  public static final int AAAA_VALUE = 2;
  /**
   * <pre>
   *auto resolved alias
   * </pre>
   *
   * <code>ALIAS = 3;</code>
   */
  public static final int ALIAS_VALUE = 3;
  /**
   * <pre>
   *canonical name for an alias
   * </pre>
   *
   * <code>CNAME = 4;</code>
   */
  public static final int CNAME_VALUE = 4;
  /**
   * <pre>
   *mail exchange
   * </pre>
   *
   * <code>MX = 5;</code>
   */
  public static final int MX_VALUE = 5;
  /**
   * <pre>
   *name server
   * </pre>
   *
   * <code>NS = 6;</code>
   */
  public static final int NS_VALUE = 6;
  /**
   * <pre>
   *pointer
   * </pre>
   *
   * <code>PTR = 7;</code>
   */
  public static final int PTR_VALUE = 7;
  /**
   * <pre>
   *start of authority
   * </pre>
   *
   * <code>SOA = 8;</code>
   */
  public static final int SOA_VALUE = 8;
  /**
   * <pre>
   *location of service
   * </pre>
   *
   * <code>SRV = 9;</code>
   */
  public static final int SRV_VALUE = 9;
  /**
   * <pre>
   *descriptive text
   * </pre>
   *
   * <code>TXT = 10;</code>
   */
  public static final int TXT_VALUE = 10;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DnsRecordType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static DnsRecordType forNumber(int value) {
    switch (value) {
      case 0: return DNS_RECORD_TYPE_UNSPECIFIED;
      case 1: return A;
      case 2: return AAAA;
      case 3: return ALIAS;
      case 4: return CNAME;
      case 5: return MX;
      case 6: return NS;
      case 7: return PTR;
      case 8: return SOA;
      case 9: return SRV;
      case 10: return TXT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DnsRecordType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DnsRecordType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DnsRecordType>() {
          public DnsRecordType findValueByNumber(int number) {
            return DnsRecordType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.leftbin.commons.proto.v1.network.dns.record.rpc.enums.EnumsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final DnsRecordType[] VALUES = values();

  public static DnsRecordType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DnsRecordType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:leftbin.commons.proto.v1.network.dns.record.rpc.enums.DnsRecordType)
}

